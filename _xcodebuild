#compdef xcodebuild

# TODO
# -target
# -configuration
# -destination

_archs() {
  local -a archs
  archs=$(xcodebuild -showBuildSettings 2>/dev/null | grep VALID_ARCHS \
    | cut -f 2 -d '=')
  echo $archs
}

_schemes() {
  local -a schemes
  schemes=$(xcodebuild -list 2>/dev/null | sed '1,/Schemes:/d')
  echo $schemes
}

_sdks() {
  local -a sdks
  sdks=$(xcodebuild -showsdks | grep -o "\-sdk.*" | cut -f 2 -d ' ')
  echo $sdks
}

_actions() {
  local -a actions
  actions=( \
    "analyze:Build and analyze a target or scheme" \
    "archive:Archive a scheme" \
    "build:Build the target" \
    "clean:Remove build products and intermediate files" \
    "install:Build and install the target" \
    "installsrc:Copy the source of the project" \
    "test:Test a scheme from" \
    )

  _describe "Build action" actions
}

_arguments \
  '(-n -dry-run)'{-n,-dry-run}'[Print but do not execute commands]' \
  '*:: :->actions' \
  '-alltargets[Build all targets in the specified project]' \
  '-arch[Architecture to build]:Architecture to build:->archs' \
  '-archivePath[Archive Path]:Archive Path:_directories' \
  '-derivedDataPath[Overrides derived data directory]:Overrides derived data directory:_directories' \
  '-destination-timeout[Device search timeout]:Device search timeout' \
  '-exportArchive[Exports an archive]' \
  '-exportFormat[Format for archive]:Format for archive:(IPA PKG APP)' \
  '-exportInstallerIdentity[Installer identity for archiving]:Installer identity for archiving' \
  '-exportProvisiningProfile[Provisioning profile for archiving]:Provisioning profile for archiving' \
  '-exportSigningIdentity[Signing identity for archiving]:Signing identity for archiving' \
  '-exportWithOriginalSigningIdentity[Specifies signing identity for archiving]' \
  '-list[Lists targets configurations and schemes]' \
  '-project[xcodeproj file]:xcodeproj:->projects' \
  '-resultBundlePath[Result bundle path]:Result bundle path:_directories' \
  '-scheme[Scheme to build]:Scheme to build:->schemes' \
  '-sdk[SDK to build with]:SDK to build with:->sdks' \
  '-showBuildSettings[Print project build settings]' \
  '-showsdks[List all SDK versions]' \
  '-skipUnavailableActions[Skip options that would fail]' \
  '-usage[Display xcodebuild usage]' \
  '-version[Prints Xcode version]' \
  '-workspace[xcworkspace file]:xcworkspace:->workspaces' \
  '-xcconfig[xcconfig file]:xcconfig:->xcconfigs'

case "$state" in
  actions)
    _actions
    ;;
  archs)
    archs=($(_archs))
    if [[ $archs != "" ]]; then
      _values "Architecture to build" $archs
    fi
    ;;
  projects)
    local -a projects
    projects=(*.xcodeproj)
    _multi_parts / projects
    ;;
  schemes)
    schemes=($(_schemes))
    if [[ $schemes != "" ]]; then
      _values "Scheme to build" $schemes
    fi
    ;;
  sdks)
    if ([[ ${+_installed_sdks} -eq 0 ]] || _cache_invalid SDKS) && ! _retrieve_cache SDKS; then
      _installed_sdks=($(_sdks))
      _store_cache SDKS _installed_sdks
    fi

    _values "SDK to build with" $_installed_sdks
    ;;
  workspaces)
    local -a workspaces
    workspaces=(*.xcworkspace)
    _multi_parts / workspaces
    ;;
  xcconfigs)
    local -a xcconfigs
    xcconfigs=(*.xcconfig)
    _multi_parts / xcconfigs
    ;;
esac
